<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping>
    <sql-query name="Note.findAllNotes">
        <return-scalar column="id" type="long" />
        <return-scalar column="userId" type="long" />
        <return-scalar column="content" type="string" />
        <return-scalar column="createdOn" type="timestamp" />
        
        <![CDATA[
            select 
                id, 
                user_id as userId, 
                content, 
                created_on as createdOn 
            from 
                note 
            where 
                user_id = :user_id 
            order by 
                createdOn desc
        ]]>
    </sql-query>
    
    <sql-query name="Note.findNote">
        <return-scalar column="id" type="long" />
        <return-scalar column="userId" type="long" />
        <return-scalar column="content" type="string" />
        <return-scalar column="createdOn" type="timestamp" />
        
        <![CDATA[
            select 
                id, 
                user_id as userId, 
                content, 
                created_on as createdOn 
            from 
                note 
            where 
                id = :id 
            and 
                user_id = :user_id
        ]]>
    </sql-query>
    
    <sql-query name="Note.findWithAnyTag">
        <return-scalar column="id" type="long" />
        <return-scalar column="userId" type="long" />
        <return-scalar column="content" type="string" />
        <return-scalar column="createdOn" type="timestamp" />
        
        <![CDATA[
            select distinct 
                n.id, 
                n.user_id as userId, 
                n.content, 
                n.created_on as createdOn 
            from 
                note n 
            inner join 
                tag t 
            on 
                n.id = t.note_id 
            where 
                n.user_id = :user_id 
            and 
                t.name in (:tags)  
            order by 
                createdOn desc
        ]]>
    </sql-query>
    
    <sql-query name="Note.findContainingPhrase">
        <return-scalar column="id" type="long" />
        <return-scalar column="userId" type="long" />
        <return-scalar column="content" type="string" />
        <return-scalar column="createdOn" type="timestamp" />
        
        <![CDATA[
            select distinct 
                n.id, 
                n.user_id as userId, 
                n.content, 
                n.created_on as createdOn 
            from 
                note n 
            where 
                n.user_id = :user_id 
            and 
                n.content like concat('%', :phrase, '%')  
            order by 
                createdOn desc
        ]]>
    </sql-query>
    
    <sql-query name="Tag.findNoteTags">
        <return-scalar column="id" type="long" />
        <return-scalar column="noteId" type="long" />
        <return-scalar column="name" type="string" />
        
        <![CDATA[
            select 
                t.id, 
                t.note_id as noteId, 
                t.name 
            from 
                tag t 
            where 
                t.note_id = :note_id 
            and 
                t.note_id in (
                    select n.id from note n 
                    where n.user_id = :user_id
                )
        ]]>
    </sql-query>
    
    <sql-query name="User.userExists">
        <return-scalar column="count" type="integer" />
        
        <![CDATA[
            select count(*) as count 
            from user 
            where username = :username
        ]]>
    </sql-query>
    
    <sql-query name="User.findUser">
        <return-scalar column="id" type="long" />
        <return-scalar column="username" type="string" />
        <return-scalar column="enabled" type="true_false" />
        
        <![CDATA[
            select 
                id, 
                username, 
                enabled 
            from 
                user 
            where 
                username = :username
        ]]>
    </sql-query>
    
    <sql-query name="User.findAllUsers">
        <return-scalar column="id" type="long" />
        <return-scalar column="username" type="string" />
        <return-scalar column="enabled" type="true_false" />
        
        <![CDATA[
            select 
                id, 
                username, 
                enabled 
            from 
                user 
        ]]>
    </sql-query>
    
    <sql-query name="User.findAllUsersStatus">
        <return-scalar column="id" type="long" />
        <return-scalar column="username" type="string" />
        <return-scalar column="enabled" type="true_false" />
        <return-scalar column="authority" type="string" />
        
        <![CDATA[
            select 
                u.id, 
                u.username, 
                u.enabled, 
                r.authority 
            from 
                user u 
            left join 
                role r 
            on 
                u.id = r.user_id 
            and 
                r.authority = 'ROLE_ADMIN' 
        ]]>
    </sql-query>
</hibernate-mapping>

